.canvasWrapper {
    display: flex;
    flex-direction: column;
    gap: calc(var(--spacing) * 0.7);
    width: 100%;
    animation: fadeIn 0.4s ease-out;
}

.canvasInstructions {
    color: var(--text-muted);
    text-align: center;
    font-size: 0.95rem;
    padding: 0.3rem 0.5rem;
    border-radius: var(--border-radius);
    background-color: var(--glass-bg);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid var(--glass-border);
    margin-bottom: 0.3rem;
    transition: all var(--transition-speed) ease;
    transform-origin: center;
    animation: slideInUp 0.4s ease-out;
}

.canvasInstructions:hover {
    transform: translateY(-2px);
    background-color: var(--glass-bg-hover);
    color: var(--body-text);
}

.canvasContainer {
    position: relative;
    margin: 0 auto;
    max-width: 100%;
    aspect-ratio: 1 / 1; /* Square canvas */
    background-color: var(--canvas-bg);
    border-radius: var(--border-radius-lg);
    border: 1px solid var(--canvas-border);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1), 
                0 10px 30px rgba(0, 0, 0, 0.08);
    cursor: crosshair;
    transition: border-color var(--transition-speed) ease,
                box-shadow var(--transition-speed) ease,
                transform var(--transition-speed) ease;
    will-change: transform;
    min-height: 300px; /* Ensure minimum height */
    min-width: 300px; /* Ensure minimum width */
    height: var(--canvas-target-size); /* Default height */
    width: var(--canvas-target-size); /* Default width */
    max-height: 95vw; /* Responsive limitation */
    max-width: 95vw; /* Responsive limitation */
}

.canvasContainer:hover {
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15), 
                0 15px 35px rgba(0, 0, 0, 0.1);
    border-color: var(--primary-color);
    transform: translateY(-3px) scale(1.005); /* Subtle lift effect */
}

/* Specialized cursors based on selected tool */
.canvasContainer[data-cursor="crosshair"] { cursor: crosshair; }
.canvasContainer[data-cursor="pencil"] { cursor: url('pencil.png') 6 24, crosshair; }
.canvasContainer[data-cursor="default"] { cursor: default; }

/* Additional class styles for canvas element itself */
.cursorPencil {
    cursor: url(pencil.png) 6 24, crosshair !important;
}
.cursorCrosshair {
    cursor: crosshair !important;
}
.cursorDefault {
    cursor: default !important;
}

/* Canvas Layers */
.drawingCanvas,
.gridCanvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: var(--border-radius-lg); /* Match container */
    touch-action: none; /* Prevent scrolling while drawing */
}

.drawingCanvas {
    z-index: 2; /* Drawing on top - changed from 1 to 2 */
    cursor: crosshair; /* Ensure cursor is visible */
}

.gridCanvas {
    z-index: 1; /* Grid under drawing layer - changed from 2 to 1 */
    pointer-events: none; /* Click through to drawing canvas */
}

/* Loading Overlay */
.loadingOverlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(var(--card-bg-rgb, 255, 255, 255), 0.7);
    color: var(--primary-color);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    font-weight: 500;
    z-index: 5; /* Above canvases */
    border-radius: var(--border-radius-lg); /* Match container */
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
    opacity: 0;
    visibility: hidden;
    transition: opacity var(--transition-speed) ease-in-out, 
                visibility 0s var(--transition-speed);
    pointer-events: none;
}

.loadingOverlay.isLoading {
    opacity: 1;
    visibility: visible;
    transition: opacity var(--transition-speed) ease-in-out, 
                visibility 0s 0s;
    pointer-events: auto;
}

/* Loading spinner */
.loadingOverlay::after {
    content: '';
    width: 30px;
    height: 30px;
    margin-top: 10px;
    border: 3px solid var(--primary-color);
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

body.dark-mode .loadingOverlay {
    color: var(--primary-color);
    background-color: rgba(var(--card-bg-rgb, 36, 37, 38), 0.7);
}

/* Define RGB for card background if not already present */
:root { --card-bg-rgb: 255, 255, 255; }
body.dark-mode { --card-bg-rgb: 36, 37, 38; }